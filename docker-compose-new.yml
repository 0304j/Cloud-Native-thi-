services:
  mongo:
     image: mongo
     ports:
       - "27017:27017"
     volumes:
       - mongo_data:/data/db
       - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js
     environment:
       MONGO_INITDB_DATABASE: shopping
       MONGO_INITDB_ROOT_USERNAME: root
       MONGO_INITDB_ROOT_PASSWORD: rootpass
     command: ["--auth"]
     healthcheck:
       test: ["CMD","mongosh", "--eval", "db.adminCommand('ping')"]
       interval: 10s
       timeout: 5s
       retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"

  auth-service:
    build: ./auth-service
    ports:
      - "8081:8081"
    depends_on:
      mongo:
        condition: service_healthy
    environment:
      MONGO_URI: mongodb://root:rootpass@mongo:27017/auth_db?authSource=admin
      MONGO_DB: auth_db
      MONGO_COLLECTION: users
      JWT_SECRET: supergeheimespasswort
      JWT_EXPIRY: 3600
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8081/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  shopping-service:
    build: ./shopping-service
    ports:
      - "8080:8080"
    depends_on:
      mongo:
        condition: service_healthy
      kafka:
        condition: service_started
    environment:
      MONGO_URI: mongodb://root:rootpass@mongo:27017/shopping?authSource=admin
      JWT_SECRET: supergeheimespasswort
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  checkout-service:
    build: ./checkout-service
    depends_on:
      kafka:
        condition: service_started

  nginx-proxy:
    build:
      context: .
      dockerfile: Dockerfile.nginx
    ports:
      - "3001:80"
    depends_on:
      auth-service:
        condition: service_healthy
      shopping-service:
        condition: service_healthy
      checkout-service:
        condition: service_started

volumes:
  mongo_data:
