services:
  mongo:
     image: mongo
     ports:
       - "27017:27017"
     volumes:
       - mongo_data:/data/db
       - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js
     environment:
       MONGO_INITDB_DATABASE: shopping
       MONGO_INITDB_ROOT_USERNAME: root
       MONGO_INITDB_ROOT_PASSWORD: rootpass
     healthcheck:
       test: ["CMD","mongosh", "--eval", "db.adminCommand('ping')"]
       interval: 10s
       timeout: 5s
       retries: 5

  redis:
    image: redis:8.2-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --appendfsync everysec
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  postgres:
    image: postgres:17
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d
    environment:
      POSTGRES_DB: paymentdb
      POSTGRES_USER: paymentuser
      POSTGRES_PASSWORD: paymentpass
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U paymentuser -d paymentdb"]
      interval: 5s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"

  kafka-setup:
    image: confluentinc/cp-kafka:7.3.0
    depends_on:
      - kafka
    command: >
      bash -c "
        echo 'Waiting for Kafka to be ready...'
        sleep 10
        kafka-topics --bootstrap-server kafka:9092 --create --topic shopping-events --partitions 3 --replication-factor 1 --if-not-exists
        kafka-topics --bootstrap-server kafka:9092 --create --topic checkout-events --partitions 3 --replication-factor 1 --if-not-exists  
        kafka-topics --bootstrap-server kafka:9092 --create --topic payment-events --partitions 3 --replication-factor 1 --if-not-exists
        kafka-topics --bootstrap-server kafka:9092 --create --topic kitchen-events --partitions 3 --replication-factor 1 --if-not-exists
        kafka-topics --bootstrap-server kafka:9092 --create --topic delivery-events --partitions 3 --replication-factor 1 --if-not-exists
        echo 'Topics created successfully!'
      "

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8090:8080"
    depends_on:
      - kafka
      - kafka-setup
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092

  payment-service:
    build: ./payment-service
    ports:
      - "8083:8083"
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
    environment:
      DATABASE_URL: postgres://paymentuser:paymentpass@postgres:5432/paymentdb?sslmode=disable
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: paymentdb
      DB_USER: paymentuser
      DB_PASSWORD: paymentpass
  auth-service:
    build: ./auth-service
    ports:
      - "8081:8081"
    depends_on:
      mongo:
        condition: service_healthy
    environment:
      MONGO_URI: mongodb://authuser:authpass@mongo:27017/auth_db?authSource=auth_db
      MONGO_DB: auth_db
      MONGO_COLLECTION: users
      JWT_SECRET: supergeheimespasswort
      JWT_EXPIRY: 3600
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8081/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  shopping-service:
    build: ./shopping-service
    ports:
      - "8080:8080"
    depends_on:
      mongo:
        condition: service_healthy
      kafka:
        condition: service_started
    environment:
      JWT_SECRET: supergeheimespasswort
      MONGO_URI: mongodb://shopuser:shoppass@mongo:27017/shopping?authSource=shopping
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  checkout-service:
    build: ./checkout-service
    depends_on:
      kafka:
        condition: service_started

  kitchen-service:
    build: ./kitchen-service
    ports:
      - "8084:8084"
    depends_on:
      mongo:
        condition: service_healthy
      kafka:
        condition: service_started
    environment:
      MONGO_URI: mongodb://kitchenuser:kitchenpass@mongo:27017/kitchen_db?authSource=kitchen_db
      KAFKA_BROKER: kafka:9092
      PORT: 8084
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8084/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  nginx-proxy:
    build:
      context: .
      dockerfile: Dockerfile.nginx
    ports:
      - "3001:80"
    depends_on:
      auth-service:
        condition: service_healthy
      shopping-service:
        condition: service_healthy
      checkout-service:
        condition: service_started
      kitchen-service:
        condition: service_healthy


volumes:
  mongo_data:
  postgres_data:
  redis_data:
